case ARRAY : offset = codegen(root->ptr2);

				r1 = get_reg();
				r2 = get_reg();

				fprintf(fp,"MOV R%d,%d\n",r1,(root->ptr1->Gentry->binding));
				fprintf(fp,"MOV R%d,%d\n",r2,(root->ptr1->Gentry->size));
				fprintf(fp,"GT R%d,R%d\n",r2,offset);
				fprintf(fp,"JZ R%d,L0\n",r2);
				free_reg();
				fprintf(fp,"ADD R%d,R%d\n",r1,offset);
				fprintf(fp,"MOV R%d,[R%d]\n",offset,r1);

				free_reg();
				return offset;
				break;

case ARRAYASGN : offset = codegen(root->ptr1);
				r1 = get_reg();
				r2 = get_reg();			

				fprintf(fp,"MOV R%d,%d\n",r1,(root->Gentry->binding));
				fprintf(fp,"MOV R%d,%d\n",r2,(root->Gentry->size));
				fprintf(fp,"GT R%d,R%d\n",r2,offset);
				fprintf(fp,"JZ R%d,L0\n",r2);
				free_reg();
				fprintf(fp,"ADD R%d,R%d\n",r1,offset);
				r2 = codegen(root->ptr2);
				fprintf(fp,"MOV [R%d],R%d\n",r1,r2);

				free_reg();
				free_reg();
				break;

case READARRAY :  offset = codegen(root->ptr2);

				r1 = get_reg();
				r2 = get_reg();

				fprintf(fp,"MOV R%d,%d\n",r1,(root->ptr1->Gentry->binding));
				fprintf(fp,"MOV R%d,%d\n",r2,(root->ptr1->Gentry->size));
				fprintf(fp,"GT R%d,R%d\n",r2,offset);
				fprintf(fp,"JZ R%d,L0\n",r2);
				free_reg();
				fprintf(fp,"ADD R%d,R%d\n",r1,offset);
				
				addr = get_staticaddr(root->ptr1->Gentry->size);
				fprintf(fp,"MOV SP,%d\n",addr);
				r2 = get_reg();
				fprintf(fp,"MOV R%d,Read\n",r2);
				fprintf(fp,"PUSH R%d\n",r2);
				fprintf(fp,"MOV R%d,-1\n",r2);//pushing arg 1
				fprintf(fp,"PUSH R%d\n",r2);
				fprintf(fp,"MOV R%d,%d\n",r2,r1);//the addr of the variable (for the value to be stored)
				fprintf(fp,"PUSH R%d\n",r2);
				fprintf(fp,"PUSH R%d\n",r2);//blank reg
				r1 = get_reg();
				fprintf(fp,"PUSH R%d\n",r1);//blank_reg for return val
				fprintf(fp,"CALL 0\n");

				fprintf(fp,"POP R%d\n",r1);
				fprintf(fp,"POP R%d\n",r2);
				fprintf(fp,"POP R%d\n",r2);
				fprintf(fp,"POP R%d\n",r2);
				fprintf(fp,"POP R%d\n",r2);
				
				free_reg();
				free_reg();
				return r1;
				break;
