expr : expr PLUS expr {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int))) 
			{$$ = makeOperatorNode(NODE_PLUS,$1,$3);
			$$->TYPE = TYPE_int;}
			else {printf("\nTYPE ERROR ADD"); exit(0);}}

	| expr MUL expr {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int))) 
			{$$ = makeOperatorNode(NODE_MUL,$1,$3);
			$$->TYPE = TYPE_int;} 
			else {printf("\nTYPE ERROR MUL"); exit(0);}}

	| expr MINUS expr {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int))) 
				{$$ = makeOperatorNode(NODE_MINUS,$1,$3);
				$$->TYPE = TYPE_int;}
				else{printf("\nTYPE ERROR MINUS"); exit(0);}}

	| expr DIV expr {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int))) 
			{$$ = makeOperatorNode(NODE_DIV,$1,$3);
			$$->TYPE = TYPE_int;}
			else {printf("\nTYPE ERROR DIV"); exit(0);}}

	| expr MOD expr {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int)))  
			{$$ = makeOperatorNode(NODE_MOD,$1,$3);
			$$->TYPE = TYPE_int;} 
			else {printf("\nTYPE ERROR MOD"); exit(0);}}
			
	| expr LT expr {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int)))  
			{ $$ = makeOperatorNode(NODE_LT,$1,$3);
			$$->TYPE = TYPE_bool;}
			else {printf("\nTYPE ERROR LESS THAN"); exit(0);}}
			
	| expr GT expr {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int)))  
			{$$ = makeOperatorNode(NODE_GT,$1,$3);
			$$->TYPE = TYPE_bool;} 
			else {printf("\nTYPE ERROR GREATER THAN"); exit(0);}}

	| expr EQ expr  {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int)))  
			{$$ = makeOperatorNode(NODE_EQ,$1,$3);
			$$->TYPE = TYPE_bool;}
			else{ printf("\nTYPE ERROR EQUAL"); exit(0);}}

	| expr NEQ expr  {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int))) 
			{$$ = makeOperatorNode(NODE_NEQ,$1,$3);
			$$->TYPE = TYPE_bool;}
			else {printf("\nTYPE ERROR NOT EQUAL"); exit(0);}}
			
	| expr LTE expr  {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int))) 
			{$$ = makeOperatorNode(NODE_LTE,$1,$3);
			$$->TYPE = TYPE_bool;}
			else { printf("\nTYPE ERROR LESS THAN OR EQUAL"); exit(0);}}

	| expr GTE expr  {if((($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_int)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_int) && ($3->TYPE == TYPE_intarray)) || (($1->TYPE == TYPE_intarray) && ($3->TYPE == TYPE_int))) 
			{$$ = makeOperatorNode(NODE_GTE,$1,$3);
			$$->TYPE = TYPE_bool;}
			else {printf("\nTYPE ERROR GREATER THAN OR EQUAL"); exit(0);}}
			
	| expr AND expr  {if(($1->TYPE != TYPE_bool) || ($3->TYPE != TYPE_bool)) { printf("\nTYPE ERROR AND"); exit(0);}
			$$ = makeOperatorNode(NODE_AND,$1,$3);
			$$->TYPE = TYPE_bool;}

	| expr OR expr  {if(($1->TYPE != TYPE_bool) || ($3->TYPE != TYPE_bool)) { printf("\nTYPE ERROR OR"); exit(0);}
			$$ = makeOperatorNode(NODE_OR,$1,$3);
			$$->TYPE = TYPE_bool;}

	| NOT expr  {if($2->TYPE != TYPE_bool) { printf("\nTYPE ERROR NOT"); exit(0);}
			$$ = makeOperatorNode(NODE_NOT,$2,NULL);
			$$->TYPE = TYPE_bool;}

